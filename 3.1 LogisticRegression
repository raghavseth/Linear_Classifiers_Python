#Regularized logistic regression (L2 Regularization)
# Train and validaton errors initialized as empty list
train_errs = list()
valid_errs = list()
# Loop over values of C_value
for C_value in [0.001, 0.01, 0.1, 1, 10, 100, 1000]:
    # Create LogisticRegression object and fit
    lr = LogisticRegression(C = C_value)
    lr.fit(X_train, y_train)    
    # Evaluate error rates and append to lists
    train_errs.append( 1.0 - lr.score(X_train, y_train) )
    valid_errs.append( 1.0 - lr.score(X_valid, y_valid) )
# Plot results
plt.semilogx(C_values, train_errs, C_values, valid_errs)
plt.legend(("train", "validation"))
plt.show()
#Too much regularization (small C) doesn't work well - due to underfitting - and too little regularization (large C) 
doesn't work well either - due to overfitting.


#Logistic regression and feature selection (L1 Regularization)
# Specify L1 regularization
lr = LogisticRegression(penalty='l1')
# Instantiate the GridSearchCV object and run the search
searcher = GridSearchCV(lr, {'C':[0.001, 0.01, 0.1, 1, 10]})
searcher.fit(X_train, y_train)
# Report the best parameters
print("Best CV params", searcher.best_params_)
# Find the number of nonzero coefficients (selected features)
best_lr = searcher.best_estimator_
coefs = best_lr.coef_
print("Total number of features:", coefs.size)
print("Number of selected features:", np.count_nonzero(coefs))

#Note: Smaller values of C lead to less confident predictions. 
#That's because smaller C means more regularization, which in turn means smaller coefficients, 
#which means raw model outputs closer to zero and, thus, probabilities closer to 0.5 after the raw model output is squashed 
#through the sigmoid function. That's quite a chain of events!
